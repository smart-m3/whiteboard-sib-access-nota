/*
 * NoTA_System_ResourceMng_R01_01_user.h
 *
 * Generated by nota-stubgen3.pl 3.0pre1
 *  Date: 24-5-2010 11:19:46
 *
 * Source: NoTA_System_ResourceMng_R01_01_v03.xml
 *  Created: 24-5-2010 9:59:8
 *  Modified: 24-5-2010 9:59:8
 *  Accessed: 24-5-2010 11:19:46
 *
 * Stub adapter version 3.0
 *
 */


#ifndef __NOTA_SYSTEM_RESOURCEMNG_R01_01_USER_H___
#define __NOTA_SYSTEM_RESOURCEMNG_R01_01_USER_H___


/* include H_IF BSDAPI definitions */
#include <h_in/h_bsdapi.h>


/* Include general support code */
#include <stubgen/hin3_stubadapter_if.h>


#include "NoTA_System_ResourceMng_R01_01_common.h"

/* These functions are for the user */
/* This function can be used to attach new socket. Library will make a copy of context pointer.*/
int NoTA_System_ResourceMng_R01_01_user_new_connection(struct context_pointer* context);
/* This function can be used to detach socket. */
int NoTA_System_ResourceMng_R01_01_user_remove_connection(struct context_pointer* context);


/* these hooks must be implemented by user. */
/* This function is called when connection was closed */
void NoTA_System_ResourceMng_R01_01_user_handler_disconnected(struct context_pointer* context);


/* This function is called when there was out-of-memory or other not so critical error (connection is still usable) */
void NoTA_System_ResourceMng_R01_01_user_handler_error(struct context_pointer* context, int error_type);


/* Stubs that can be used to send messages */

/*       Message for registering a service. */
/*         Name for the used service ontology (e.f. "NoTA"). */
/*         Service description following the defined ontology (e.g. "NoTA_ServiceName_R01_01_v02"). */
/*         Service registration certificate. */
int NoTA_System_ResourceMng_R01_01_Register_req( struct context_pointer* context, uint8_t* ontology_name, uint16_t ontology_name_len, uint8_t* service_desc, uint16_t service_desc_len, uint8_t* cert_reg, uint16_t cert_reg_len );

/*       Message for deregistering a service. */
/*         Device context unique Service Identifier (SID). */
/*         Certificate for deregistering the service. */
int NoTA_System_ResourceMng_R01_01_Deregister_req( struct context_pointer* context, sid_t sid, uint8_t* certificate, uint16_t certificate_len );

/*       Responce to challenge indication. */
/*         Challenge response data. */
int NoTA_System_ResourceMng_R01_01_Challenge_rsp( struct context_pointer* context, uint8_t* challenge, uint16_t challenge_len );

/*       Message for resolving service desc. into SID. */
/*         Name for the used service ontology (e.f. "NoTA"). */
/*         Service name following the defined ontology. */
int NoTA_System_ResourceMng_R01_01_ResolveService_req( struct context_pointer* context, uint8_t* ontology_name, uint16_t ontology_name_len, uint8_t* service_desc, uint16_t service_desc_len );

/*       Message for retrieving list of registered services. */
/*         Name of the ontology whose service list is requested. */
int NoTA_System_ResourceMng_R01_01_ListOfServices_req( struct context_pointer* context, uint8_t* ontology_name, uint16_t ontology_name_len );

/*       Activates an event that triggers when the given service registers */
/*       or deregisters itself. */
/*         Event type (see enumeration). */
/*         Name for the used service ontology (e.f. "NoTA"). */
/*         Service name following the defined ontology. */
int NoTA_System_ResourceMng_R01_01_NewEvent_req( struct context_pointer* context, event_t event_t, uint8_t* ontology_name, uint16_t ontology_name_len, uint8_t* service_desc, uint16_t service_desc_len );

/*       Deletes an existing event. */
/*         Session-wise unique event ID. */
int NoTA_System_ResourceMng_R01_01_DeleteEvent_req( struct context_pointer* context, uint32_t event_id );



/* Skeleton prototypes; user must implement them. */
void NoTA_System_ResourceMng_R01_01_Register_cnf_process( struct context_pointer* context, status_t status, sid_t sid, uint8_t* cert_dereg, uint16_t cert_dereg_len, uint8_t* cert_act, uint16_t cert_act_len );
void NoTA_System_ResourceMng_R01_01_Deregister_cnf_process( struct context_pointer* context, status_t status );
void NoTA_System_ResourceMng_R01_01_Challenge_ind_process( struct context_pointer* context, uint8_t* challenge, uint16_t challenge_len );
void NoTA_System_ResourceMng_R01_01_ResolveService_cnf_process( struct context_pointer* context, status_t status, sid_t sid );
void NoTA_System_ResourceMng_R01_01_ListOfServices_cnf_process( struct context_pointer* context, servicelist_t* servicelist );
void NoTA_System_ResourceMng_R01_01_NewEvent_cnf_process( struct context_pointer* context, int32_t event_id, status_t status );
void NoTA_System_ResourceMng_R01_01_NewEvent_ind_process( struct context_pointer* context, uint32_t event_id, event_t event_t );
void NoTA_System_ResourceMng_R01_01_DeleteEvent_cnf_process( struct context_pointer* context, status_t status );


#endif /*  __NOTA_SYSTEM_RESOURCEMNG_R01_01_USER_H___ */
